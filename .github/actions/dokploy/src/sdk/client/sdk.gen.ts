// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-fetch';
import type {
  AdminOneData,
  AdminOneError,
  AdminUpdateData,
  AdminUpdateError,
  AdminCreateUserInvitationData,
  AdminCreateUserInvitationError,
  AdminRemoveUserData,
  AdminRemoveUserError,
  AdminGetUserByTokenData,
  AdminGetUserByTokenError,
  AdminAssignPermissionsData,
  AdminAssignPermissionsError,
  DockerGetContainersData,
  DockerGetContainersError,
  DockerRestartContainerData,
  DockerRestartContainerError,
  DockerGetConfigData,
  DockerGetConfigError,
  DockerGetContainersByAppNameMatchData,
  DockerGetContainersByAppNameMatchError,
  DockerGetContainersByAppLabelData,
  DockerGetContainersByAppLabelError,
  AuthCreateAdminData,
  AuthCreateAdminError,
  AuthCreateUserData,
  AuthCreateUserError,
  AuthLoginData,
  AuthLoginError,
  AuthGetData,
  AuthGetError,
  AuthLogoutData,
  AuthLogoutError,
  AuthUpdateData,
  AuthUpdateError,
  AuthGenerateTokenData,
  AuthGenerateTokenError,
  AuthOneData,
  AuthOneError,
  AuthGenerate2FaSecretData,
  AuthGenerate2FaSecretError,
  AuthVerify2FaSetupData,
  AuthVerify2FaSetupError,
  AuthVerifyLogin2FaData,
  AuthVerifyLogin2FaError,
  AuthDisable2FaData,
  AuthDisable2FaError,
  AuthSendResetPasswordEmailData,
  AuthSendResetPasswordEmailError,
  AuthResetPasswordData,
  AuthResetPasswordError,
  AuthConfirmEmailData,
  AuthConfirmEmailError,
  ProjectCreateData,
  ProjectCreateError,
  ProjectOneData,
  ProjectOneError,
  ProjectAllData,
  ProjectAllError,
  ProjectRemoveData,
  ProjectRemoveError,
  ProjectUpdateData,
  ProjectUpdateError,
  ApplicationCreateData,
  ApplicationCreateError,
  ApplicationOneData,
  ApplicationOneError,
  ApplicationReloadData,
  ApplicationReloadError,
  ApplicationDeleteData,
  ApplicationDeleteError,
  ApplicationStopData,
  ApplicationStopError,
  ApplicationStartData,
  ApplicationStartError,
  ApplicationRedeployData,
  ApplicationRedeployError,
  ApplicationSaveEnvironmentData,
  ApplicationSaveEnvironmentError,
  ApplicationSaveBuildTypeData,
  ApplicationSaveBuildTypeError,
  ApplicationSaveGithubProviderData,
  ApplicationSaveGithubProviderError,
  ApplicationSaveGitlabProviderData,
  ApplicationSaveGitlabProviderError,
  ApplicationSaveBitbucketProviderData,
  ApplicationSaveBitbucketProviderError,
  ApplicationSaveDockerProviderData,
  ApplicationSaveDockerProviderError,
  ApplicationSaveGitProdiverData,
  ApplicationSaveGitProdiverError,
  ApplicationMarkRunningData,
  ApplicationMarkRunningError,
  ApplicationUpdateData,
  ApplicationUpdateError,
  ApplicationRefreshTokenData,
  ApplicationRefreshTokenError,
  ApplicationDeployData,
  ApplicationDeployError,
  ApplicationCleanQueuesData,
  ApplicationCleanQueuesError,
  ApplicationReadTraefikConfigData,
  ApplicationReadTraefikConfigError,
  ApplicationUpdateTraefikConfigData,
  ApplicationUpdateTraefikConfigError,
  ApplicationReadAppMonitoringData,
  ApplicationReadAppMonitoringError,
  MysqlCreateData,
  MysqlCreateError,
  MysqlOneData,
  MysqlOneError,
  MysqlStartData,
  MysqlStartError,
  MysqlStopData,
  MysqlStopError,
  MysqlSaveExternalPortData,
  MysqlSaveExternalPortError,
  MysqlDeployData,
  MysqlDeployError,
  MysqlChangeStatusData,
  MysqlChangeStatusError,
  MysqlReloadData,
  MysqlReloadError,
  MysqlRemoveData,
  MysqlRemoveError,
  MysqlSaveEnvironmentData,
  MysqlSaveEnvironmentError,
  MysqlUpdateData,
  MysqlUpdateError,
  PostgresCreateData,
  PostgresCreateError,
  PostgresOneData,
  PostgresOneError,
  PostgresStartData,
  PostgresStartError,
  PostgresStopData,
  PostgresStopError,
  PostgresSaveExternalPortData,
  PostgresSaveExternalPortError,
  PostgresDeployData,
  PostgresDeployError,
  PostgresChangeStatusData,
  PostgresChangeStatusError,
  PostgresRemoveData,
  PostgresRemoveError,
  PostgresSaveEnvironmentData,
  PostgresSaveEnvironmentError,
  PostgresReloadData,
  PostgresReloadError,
  PostgresUpdateData,
  PostgresUpdateError,
  RedisCreateData,
  RedisCreateError,
  RedisOneData,
  RedisOneError,
  RedisStartData,
  RedisStartError,
  RedisReloadData,
  RedisReloadError,
  RedisStopData,
  RedisStopError,
  RedisSaveExternalPortData,
  RedisSaveExternalPortError,
  RedisDeployData,
  RedisDeployError,
  RedisChangeStatusData,
  RedisChangeStatusError,
  RedisRemoveData,
  RedisRemoveError,
  RedisSaveEnvironmentData,
  RedisSaveEnvironmentError,
  RedisUpdateData,
  RedisUpdateError,
  MongoCreateData,
  MongoCreateError,
  MongoOneData,
  MongoOneError,
  MongoStartData,
  MongoStartError,
  MongoStopData,
  MongoStopError,
  MongoSaveExternalPortData,
  MongoSaveExternalPortError,
  MongoDeployData,
  MongoDeployError,
  MongoChangeStatusData,
  MongoChangeStatusError,
  MongoReloadData,
  MongoReloadError,
  MongoRemoveData,
  MongoRemoveError,
  MongoSaveEnvironmentData,
  MongoSaveEnvironmentError,
  MongoUpdateData,
  MongoUpdateError,
  MariadbCreateData,
  MariadbCreateError,
  MariadbOneData,
  MariadbOneError,
  MariadbStartData,
  MariadbStartError,
  MariadbStopData,
  MariadbStopError,
  MariadbSaveExternalPortData,
  MariadbSaveExternalPortError,
  MariadbDeployData,
  MariadbDeployError,
  MariadbChangeStatusData,
  MariadbChangeStatusError,
  MariadbRemoveData,
  MariadbRemoveError,
  MariadbSaveEnvironmentData,
  MariadbSaveEnvironmentError,
  MariadbReloadData,
  MariadbReloadError,
  MariadbUpdateData,
  MariadbUpdateError,
  ComposeCreateData,
  ComposeCreateError,
  ComposeOneData,
  ComposeOneError,
  ComposeUpdateData,
  ComposeUpdateError,
  ComposeDeleteData,
  ComposeDeleteError,
  ComposeCleanQueuesData,
  ComposeCleanQueuesError,
  ComposeLoadServicesData,
  ComposeLoadServicesError,
  ComposeFetchSourceTypeData,
  ComposeFetchSourceTypeError,
  ComposeRandomizeComposeData,
  ComposeRandomizeComposeError,
  ComposeGetConvertedComposeData,
  ComposeGetConvertedComposeError,
  ComposeDeployData,
  ComposeDeployError,
  ComposeRedeployData,
  ComposeRedeployError,
  ComposeStopData,
  ComposeStopError,
  ComposeGetDefaultCommandData,
  ComposeGetDefaultCommandError,
  ComposeRefreshTokenData,
  ComposeRefreshTokenError,
  ComposeDeployTemplateData,
  ComposeDeployTemplateError,
  ComposeTemplatesData,
  ComposeTemplatesError,
  ComposeGetTagsData,
  ComposeGetTagsError,
  UserAllData,
  UserAllError,
  UserByAuthIdData,
  UserByAuthIdError,
  UserByUserIdData,
  UserByUserIdError,
  DomainCreateData,
  DomainCreateError,
  DomainByApplicationIdData,
  DomainByApplicationIdError,
  DomainByComposeIdData,
  DomainByComposeIdError,
  DomainGenerateDomainData,
  DomainGenerateDomainError,
  DomainUpdateData,
  DomainUpdateError,
  DomainOneData,
  DomainOneError,
  DomainDeleteData,
  DomainDeleteError,
  DestinationCreateData,
  DestinationCreateError,
  DestinationTestConnectionData,
  DestinationTestConnectionError,
  DestinationOneData,
  DestinationOneError,
  DestinationAllData,
  DestinationAllError,
  DestinationRemoveData,
  DestinationRemoveError,
  DestinationUpdateData,
  DestinationUpdateError,
  BackupCreateData,
  BackupCreateError,
  BackupOneData,
  BackupOneError,
  BackupUpdateData,
  BackupUpdateError,
  BackupRemoveData,
  BackupRemoveError,
  BackupManualBackupPostgresData,
  BackupManualBackupPostgresError,
  BackupManualBackupMySqlData,
  BackupManualBackupMySqlError,
  BackupManualBackupMariadbData,
  BackupManualBackupMariadbError,
  BackupManualBackupMongoData,
  BackupManualBackupMongoError,
  DeploymentAllData,
  DeploymentAllError,
  DeploymentAllByComposeData,
  DeploymentAllByComposeError,
  DeploymentAllByServerData,
  DeploymentAllByServerError,
  MountsCreateData,
  MountsCreateError,
  MountsRemoveData,
  MountsRemoveError,
  MountsOneData,
  MountsOneError,
  MountsUpdateData,
  MountsUpdateError,
  CertificatesCreateData,
  CertificatesCreateError,
  CertificatesOneData,
  CertificatesOneError,
  CertificatesRemoveData,
  CertificatesRemoveError,
  CertificatesAllData,
  CertificatesAllError,
  SettingsReloadServerData,
  SettingsReloadServerError,
  SettingsReloadTraefikData,
  SettingsReloadTraefikError,
  SettingsToggleDashboardData,
  SettingsToggleDashboardError,
  SettingsCleanUnusedImagesData,
  SettingsCleanUnusedImagesError,
  SettingsCleanUnusedVolumesData,
  SettingsCleanUnusedVolumesError,
  SettingsCleanStoppedContainersData,
  SettingsCleanStoppedContainersError,
  SettingsCleanDockerBuilderData,
  SettingsCleanDockerBuilderError,
  SettingsCleanDockerPruneData,
  SettingsCleanDockerPruneError,
  SettingsCleanAllData,
  SettingsCleanAllError,
  SettingsCleanMonitoringData,
  SettingsCleanMonitoringError,
  SettingsSaveSshPrivateKeyData,
  SettingsSaveSshPrivateKeyError,
  SettingsAssignDomainServerData,
  SettingsAssignDomainServerError,
  SettingsCleanSshPrivateKeyData,
  SettingsCleanSshPrivateKeyError,
  SettingsUpdateDockerCleanupData,
  SettingsUpdateDockerCleanupError,
  SettingsReadTraefikConfigData,
  SettingsReadTraefikConfigError,
  SettingsUpdateTraefikConfigData,
  SettingsUpdateTraefikConfigError,
  SettingsReadWebServerTraefikConfigData,
  SettingsReadWebServerTraefikConfigError,
  SettingsUpdateWebServerTraefikConfigData,
  SettingsUpdateWebServerTraefikConfigError,
  SettingsReadMiddlewareTraefikConfigData,
  SettingsReadMiddlewareTraefikConfigError,
  SettingsUpdateMiddlewareTraefikConfigData,
  SettingsUpdateMiddlewareTraefikConfigError,
  SettingsCheckAndUpdateImageData,
  SettingsCheckAndUpdateImageError,
  SettingsUpdateServerData,
  SettingsUpdateServerError,
  SettingsGetDokployVersionData,
  SettingsGetDokployVersionError,
  SettingsReadDirectoriesData,
  SettingsReadDirectoriesError,
  SettingsUpdateTraefikFileData,
  SettingsUpdateTraefikFileError,
  SettingsReadTraefikFileData,
  SettingsReadTraefikFileError,
  SettingsGetIpData,
  SettingsGetIpError,
  SettingsGetOpenApiDocumentData,
  SettingsGetOpenApiDocumentError,
  SettingsReadTraefikEnvData,
  SettingsReadTraefikEnvError,
  SettingsWriteTraefikEnvData,
  SettingsWriteTraefikEnvError,
  SettingsHaveTraefikDashboardPortEnabledData,
  SettingsHaveTraefikDashboardPortEnabledError,
  SettingsReadStatsData,
  SettingsReadStatsError,
  SettingsGetLogRotateStatusData,
  SettingsGetLogRotateStatusError,
  SettingsToggleLogRotateData,
  SettingsToggleLogRotateError,
  SettingsHaveActivateRequestsData,
  SettingsHaveActivateRequestsError,
  SettingsToggleRequestsData,
  SettingsToggleRequestsError,
  SettingsIsCloudData,
  SettingsIsCloudError,
  SettingsHealthData,
  SettingsHealthError,
  SettingsSetupGpuData,
  SettingsSetupGpuError,
  SettingsCheckGpuStatusData,
  SettingsCheckGpuStatusError,
  SecurityCreateData,
  SecurityCreateError,
  SecurityOneData,
  SecurityOneError,
  SecurityDeleteData,
  SecurityDeleteError,
  SecurityUpdateData,
  SecurityUpdateError,
  RedirectsCreateData,
  RedirectsCreateError,
  RedirectsOneData,
  RedirectsOneError,
  RedirectsDeleteData,
  RedirectsDeleteError,
  RedirectsUpdateData,
  RedirectsUpdateError,
  PortCreateData,
  PortCreateError,
  PortOneData,
  PortOneError,
  PortDeleteData,
  PortDeleteError,
  PortUpdateData,
  PortUpdateError,
  RegistryCreateData,
  RegistryCreateError,
  RegistryRemoveData,
  RegistryRemoveError,
  RegistryUpdateData,
  RegistryUpdateError,
  RegistryAllData,
  RegistryAllError,
  RegistryOneData,
  RegistryOneError,
  RegistryTestRegistryData,
  RegistryTestRegistryError,
  ClusterGetNodesData,
  ClusterGetNodesError,
  ClusterRemoveWorkerData,
  ClusterRemoveWorkerError,
  ClusterAddWorkerData,
  ClusterAddWorkerError,
  ClusterAddManagerData,
  ClusterAddManagerError,
  NotificationCreateSlackData,
  NotificationCreateSlackError,
  NotificationUpdateSlackData,
  NotificationUpdateSlackError,
  NotificationTestSlackConnectionData,
  NotificationTestSlackConnectionError,
  NotificationCreateTelegramData,
  NotificationCreateTelegramError,
  NotificationUpdateTelegramData,
  NotificationUpdateTelegramError,
  NotificationTestTelegramConnectionData,
  NotificationTestTelegramConnectionError,
  NotificationCreateDiscordData,
  NotificationCreateDiscordError,
  NotificationUpdateDiscordData,
  NotificationUpdateDiscordError,
  NotificationTestDiscordConnectionData,
  NotificationTestDiscordConnectionError,
  NotificationCreateEmailData,
  NotificationCreateEmailError,
  NotificationUpdateEmailData,
  NotificationUpdateEmailError,
  NotificationTestEmailConnectionData,
  NotificationTestEmailConnectionError,
  NotificationRemoveData,
  NotificationRemoveError,
  NotificationOneData,
  NotificationOneError,
  NotificationAllData,
  NotificationAllError,
  SshKeyCreateData,
  SshKeyCreateError,
  SshKeyRemoveData,
  SshKeyRemoveError,
  SshKeyOneData,
  SshKeyOneError,
  SshKeyAllData,
  SshKeyAllError,
  SshKeyGenerateData,
  SshKeyGenerateError,
  SshKeyUpdateData,
  SshKeyUpdateError,
  GitProviderGetAllData,
  GitProviderGetAllError,
  GitProviderRemoveData,
  GitProviderRemoveError,
  BitbucketCreateData,
  BitbucketCreateError,
  BitbucketOneData,
  BitbucketOneError,
  BitbucketBitbucketProvidersData,
  BitbucketBitbucketProvidersError,
  BitbucketGetBitbucketRepositoriesData,
  BitbucketGetBitbucketRepositoriesError,
  BitbucketGetBitbucketBranchesData,
  BitbucketGetBitbucketBranchesError,
  BitbucketTestConnectionData,
  BitbucketTestConnectionError,
  BitbucketUpdateData,
  BitbucketUpdateError,
  GitlabCreateData,
  GitlabCreateError,
  GitlabOneData,
  GitlabOneError,
  GitlabGitlabProvidersData,
  GitlabGitlabProvidersError,
  GitlabGetGitlabRepositoriesData,
  GitlabGetGitlabRepositoriesError,
  GitlabGetGitlabBranchesData,
  GitlabGetGitlabBranchesError,
  GitlabTestConnectionData,
  GitlabTestConnectionError,
  GitlabUpdateData,
  GitlabUpdateError,
  GithubOneData,
  GithubOneError,
  GithubGetGithubRepositoriesData,
  GithubGetGithubRepositoriesError,
  GithubGetGithubBranchesData,
  GithubGetGithubBranchesError,
  GithubGithubProvidersData,
  GithubGithubProvidersError,
  GithubTestConnectionData,
  GithubTestConnectionError,
  GithubUpdateData,
  GithubUpdateError,
  ServerCreateData,
  ServerCreateError,
  ServerOneData,
  ServerOneError,
  ServerAllData,
  ServerAllError,
  ServerWithSshKeyData,
  ServerWithSshKeyError,
  ServerSetupData,
  ServerSetupError,
  ServerRemoveData,
  ServerRemoveError,
  ServerUpdateData,
  ServerUpdateError,
  ServerPublicIpData,
  ServerPublicIpError,
  StripeGetProductsData,
  StripeGetProductsError,
  StripeCreateCheckoutSessionData,
  StripeCreateCheckoutSessionError,
  StripeCreateCustomerPortalSessionData,
  StripeCreateCustomerPortalSessionError,
  StripeCanCreateMoreServersData,
  StripeCanCreateMoreServersError,
} from './types.gen';

export const client = createClient(createConfig());

export const adminOne = <ThrowOnError extends boolean = false>(
  options?: Options<AdminOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, AdminOneError, ThrowOnError>({
    ...options,
    url: '/admin.one',
  });
};

export const adminUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AdminUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AdminUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/admin.update',
  });
};

export const adminCreateUserInvitation = <ThrowOnError extends boolean = false>(
  options: Options<AdminCreateUserInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AdminCreateUserInvitationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/admin.createUserInvitation',
  });
};

export const adminRemoveUser = <ThrowOnError extends boolean = false>(
  options: Options<AdminRemoveUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AdminRemoveUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/admin.removeUser',
  });
};

export const adminGetUserByToken = <ThrowOnError extends boolean = false>(
  options: Options<AdminGetUserByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    AdminGetUserByTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.getUserByToken',
  });
};

export const adminAssignPermissions = <ThrowOnError extends boolean = false>(
  options: Options<AdminAssignPermissionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AdminAssignPermissionsError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/admin.assignPermissions',
  });
};

export const dockerGetContainers = <ThrowOnError extends boolean = false>(
  options?: Options<DockerGetContainersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DockerGetContainersError,
    ThrowOnError
  >({
    ...options,
    url: '/docker.getContainers',
  });
};

export const dockerRestartContainer = <ThrowOnError extends boolean = false>(
  options: Options<DockerRestartContainerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DockerRestartContainerError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/docker.restartContainer',
  });
};

export const dockerGetConfig = <ThrowOnError extends boolean = false>(
  options: Options<DockerGetConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DockerGetConfigError,
    ThrowOnError
  >({
    ...options,
    url: '/docker.getConfig',
  });
};

export const dockerGetContainersByAppNameMatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DockerGetContainersByAppNameMatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DockerGetContainersByAppNameMatchError,
    ThrowOnError
  >({
    ...options,
    url: '/docker.getContainersByAppNameMatch',
  });
};

export const dockerGetContainersByAppLabel = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DockerGetContainersByAppLabelData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DockerGetContainersByAppLabelError,
    ThrowOnError
  >({
    ...options,
    url: '/docker.getContainersByAppLabel',
  });
};

export const authCreateAdmin = <ThrowOnError extends boolean = false>(
  options: Options<AuthCreateAdminData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthCreateAdminError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.createAdmin',
  });
};

export const authCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<AuthCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthCreateUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.createUser',
  });
};

export const authLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthLoginError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.login',
  });
};

export const authGet = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, AuthGetError, ThrowOnError>({
    ...options,
    url: '/auth.get',
  });
};

export const authLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthLogoutError,
    ThrowOnError
  >({
    ...options,
    url: '/auth.logout',
  });
};

export const authUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AuthUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.update',
  });
};

export const authGenerateToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGenerateTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthGenerateTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/auth.generateToken',
  });
};

export const authOne = <ThrowOnError extends boolean = false>(
  options: Options<AuthOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, AuthOneError, ThrowOnError>({
    ...options,
    url: '/auth.one',
  });
};

export const authGenerate2FaSecret = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGenerate2FaSecretData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    AuthGenerate2FaSecretError,
    ThrowOnError
  >({
    ...options,
    url: '/auth.generate2FASecret',
  });
};

export const authVerify2FaSetup = <ThrowOnError extends boolean = false>(
  options: Options<AuthVerify2FaSetupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthVerify2FaSetupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.verify2FASetup',
  });
};

export const authVerifyLogin2Fa = <ThrowOnError extends boolean = false>(
  options: Options<AuthVerifyLogin2FaData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthVerifyLogin2FaError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.verifyLogin2FA',
  });
};

export const authDisable2Fa = <ThrowOnError extends boolean = false>(
  options?: Options<AuthDisable2FaData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthDisable2FaError,
    ThrowOnError
  >({
    ...options,
    url: '/auth.disable2FA',
  });
};

export const authSendResetPasswordEmail = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthSendResetPasswordEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthSendResetPasswordEmailError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.sendResetPasswordEmail',
  });
};

export const authResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<AuthResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthResetPasswordError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.resetPassword',
  });
};

export const authConfirmEmail = <ThrowOnError extends boolean = false>(
  options: Options<AuthConfirmEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AuthConfirmEmailError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/auth.confirmEmail',
  });
};

export const projectCreate = <ThrowOnError extends boolean = false>(
  options: Options<ProjectCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ProjectCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/project.create',
  });
};

export const projectOne = <ThrowOnError extends boolean = false>(
  options: Options<ProjectOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ProjectOneError,
    ThrowOnError
  >({
    ...options,
    url: '/project.one',
  });
};

export const projectAll = <ThrowOnError extends boolean = false>(
  options?: Options<ProjectAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ProjectAllError,
    ThrowOnError
  >({
    ...options,
    url: '/project.all',
  });
};

export const projectRemove = <ThrowOnError extends boolean = false>(
  options: Options<ProjectRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ProjectRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/project.remove',
  });
};

export const projectUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ProjectUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ProjectUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/project.update',
  });
};

export const applicationCreate = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.create',
  });
};

export const applicationOne = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ApplicationOneError,
    ThrowOnError
  >({
    ...options,
    url: '/application.one',
  });
};

export const applicationReload = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.reload',
  });
};

export const applicationDelete = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.delete',
  });
};

export const applicationStop = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.stop',
  });
};

export const applicationStart = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.start',
  });
};

export const applicationRedeploy = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationRedeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationRedeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.redeploy',
  });
};

export const applicationSaveEnvironment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveEnvironment',
  });
};

export const applicationSaveBuildType = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationSaveBuildTypeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveBuildTypeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveBuildType',
  });
};

export const applicationSaveGithubProvider = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveGithubProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveGithubProviderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveGithubProvider',
  });
};

export const applicationSaveGitlabProvider = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveGitlabProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveGitlabProviderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveGitlabProvider',
  });
};

export const applicationSaveBitbucketProvider = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveBitbucketProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveBitbucketProviderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveBitbucketProvider',
  });
};

export const applicationSaveDockerProvider = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveDockerProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveDockerProviderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveDockerProvider',
  });
};

export const applicationSaveGitProdiver = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationSaveGitProdiverData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationSaveGitProdiverError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.saveGitProdiver',
  });
};

export const applicationMarkRunning = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationMarkRunningData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationMarkRunningError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.markRunning',
  });
};

export const applicationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.update',
  });
};

export const applicationRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationRefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationRefreshTokenError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.refreshToken',
  });
};

export const applicationDeploy = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.deploy',
  });
};

export const applicationCleanQueues = <ThrowOnError extends boolean = false>(
  options: Options<ApplicationCleanQueuesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationCleanQueuesError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.cleanQueues',
  });
};

export const applicationReadTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationReadTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ApplicationReadTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    url: '/application.readTraefikConfig',
  });
};

export const applicationUpdateTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationUpdateTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ApplicationUpdateTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/application.updateTraefikConfig',
  });
};

export const applicationReadAppMonitoring = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApplicationReadAppMonitoringData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ApplicationReadAppMonitoringError,
    ThrowOnError
  >({
    ...options,
    url: '/application.readAppMonitoring',
  });
};

export const mysqlCreate = <ThrowOnError extends boolean = false>(
  options: Options<MysqlCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.create',
  });
};

export const mysqlOne = <ThrowOnError extends boolean = false>(
  options: Options<MysqlOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, MysqlOneError, ThrowOnError>({
    ...options,
    url: '/mysql.one',
  });
};

export const mysqlStart = <ThrowOnError extends boolean = false>(
  options: Options<MysqlStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.start',
  });
};

export const mysqlStop = <ThrowOnError extends boolean = false>(
  options: Options<MysqlStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.stop',
  });
};

export const mysqlSaveExternalPort = <ThrowOnError extends boolean = false>(
  options: Options<MysqlSaveExternalPortData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlSaveExternalPortError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.saveExternalPort',
  });
};

export const mysqlDeploy = <ThrowOnError extends boolean = false>(
  options: Options<MysqlDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.deploy',
  });
};

export const mysqlChangeStatus = <ThrowOnError extends boolean = false>(
  options: Options<MysqlChangeStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlChangeStatusError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.changeStatus',
  });
};

export const mysqlReload = <ThrowOnError extends boolean = false>(
  options: Options<MysqlReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.reload',
  });
};

export const mysqlRemove = <ThrowOnError extends boolean = false>(
  options: Options<MysqlRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.remove',
  });
};

export const mysqlSaveEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<MysqlSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.saveEnvironment',
  });
};

export const mysqlUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MysqlUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MysqlUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mysql.update',
  });
};

export const postgresCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostgresCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.create',
  });
};

export const postgresOne = <ThrowOnError extends boolean = false>(
  options: Options<PostgresOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    PostgresOneError,
    ThrowOnError
  >({
    ...options,
    url: '/postgres.one',
  });
};

export const postgresStart = <ThrowOnError extends boolean = false>(
  options: Options<PostgresStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.start',
  });
};

export const postgresStop = <ThrowOnError extends boolean = false>(
  options: Options<PostgresStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.stop',
  });
};

export const postgresSaveExternalPort = <ThrowOnError extends boolean = false>(
  options: Options<PostgresSaveExternalPortData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresSaveExternalPortError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.saveExternalPort',
  });
};

export const postgresDeploy = <ThrowOnError extends boolean = false>(
  options: Options<PostgresDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.deploy',
  });
};

export const postgresChangeStatus = <ThrowOnError extends boolean = false>(
  options: Options<PostgresChangeStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresChangeStatusError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.changeStatus',
  });
};

export const postgresRemove = <ThrowOnError extends boolean = false>(
  options: Options<PostgresRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.remove',
  });
};

export const postgresSaveEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<PostgresSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.saveEnvironment',
  });
};

export const postgresReload = <ThrowOnError extends boolean = false>(
  options: Options<PostgresReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.reload',
  });
};

export const postgresUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PostgresUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PostgresUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/postgres.update',
  });
};

export const redisCreate = <ThrowOnError extends boolean = false>(
  options: Options<RedisCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.create',
  });
};

export const redisOne = <ThrowOnError extends boolean = false>(
  options: Options<RedisOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, RedisOneError, ThrowOnError>({
    ...options,
    url: '/redis.one',
  });
};

export const redisStart = <ThrowOnError extends boolean = false>(
  options: Options<RedisStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.start',
  });
};

export const redisReload = <ThrowOnError extends boolean = false>(
  options: Options<RedisReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.reload',
  });
};

export const redisStop = <ThrowOnError extends boolean = false>(
  options: Options<RedisStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.stop',
  });
};

export const redisSaveExternalPort = <ThrowOnError extends boolean = false>(
  options: Options<RedisSaveExternalPortData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisSaveExternalPortError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.saveExternalPort',
  });
};

export const redisDeploy = <ThrowOnError extends boolean = false>(
  options: Options<RedisDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.deploy',
  });
};

export const redisChangeStatus = <ThrowOnError extends boolean = false>(
  options: Options<RedisChangeStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisChangeStatusError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.changeStatus',
  });
};

export const redisRemove = <ThrowOnError extends boolean = false>(
  options: Options<RedisRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.remove',
  });
};

export const redisSaveEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<RedisSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.saveEnvironment',
  });
};

export const redisUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RedisUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedisUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redis.update',
  });
};

export const mongoCreate = <ThrowOnError extends boolean = false>(
  options: Options<MongoCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.create',
  });
};

export const mongoOne = <ThrowOnError extends boolean = false>(
  options: Options<MongoOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, MongoOneError, ThrowOnError>({
    ...options,
    url: '/mongo.one',
  });
};

export const mongoStart = <ThrowOnError extends boolean = false>(
  options: Options<MongoStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.start',
  });
};

export const mongoStop = <ThrowOnError extends boolean = false>(
  options: Options<MongoStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.stop',
  });
};

export const mongoSaveExternalPort = <ThrowOnError extends boolean = false>(
  options: Options<MongoSaveExternalPortData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoSaveExternalPortError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.saveExternalPort',
  });
};

export const mongoDeploy = <ThrowOnError extends boolean = false>(
  options: Options<MongoDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.deploy',
  });
};

export const mongoChangeStatus = <ThrowOnError extends boolean = false>(
  options: Options<MongoChangeStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoChangeStatusError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.changeStatus',
  });
};

export const mongoReload = <ThrowOnError extends boolean = false>(
  options: Options<MongoReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.reload',
  });
};

export const mongoRemove = <ThrowOnError extends boolean = false>(
  options: Options<MongoRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.remove',
  });
};

export const mongoSaveEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<MongoSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.saveEnvironment',
  });
};

export const mongoUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MongoUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MongoUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mongo.update',
  });
};

export const mariadbCreate = <ThrowOnError extends boolean = false>(
  options: Options<MariadbCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.create',
  });
};

export const mariadbOne = <ThrowOnError extends boolean = false>(
  options: Options<MariadbOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    MariadbOneError,
    ThrowOnError
  >({
    ...options,
    url: '/mariadb.one',
  });
};

export const mariadbStart = <ThrowOnError extends boolean = false>(
  options: Options<MariadbStartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbStartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.start',
  });
};

export const mariadbStop = <ThrowOnError extends boolean = false>(
  options: Options<MariadbStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.stop',
  });
};

export const mariadbSaveExternalPort = <ThrowOnError extends boolean = false>(
  options: Options<MariadbSaveExternalPortData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbSaveExternalPortError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.saveExternalPort',
  });
};

export const mariadbDeploy = <ThrowOnError extends boolean = false>(
  options: Options<MariadbDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.deploy',
  });
};

export const mariadbChangeStatus = <ThrowOnError extends boolean = false>(
  options: Options<MariadbChangeStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbChangeStatusError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.changeStatus',
  });
};

export const mariadbRemove = <ThrowOnError extends boolean = false>(
  options: Options<MariadbRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.remove',
  });
};

export const mariadbSaveEnvironment = <ThrowOnError extends boolean = false>(
  options: Options<MariadbSaveEnvironmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbSaveEnvironmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.saveEnvironment',
  });
};

export const mariadbReload = <ThrowOnError extends boolean = false>(
  options: Options<MariadbReloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbReloadError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.reload',
  });
};

export const mariadbUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MariadbUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MariadbUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mariadb.update',
  });
};

export const composeCreate = <ThrowOnError extends boolean = false>(
  options: Options<ComposeCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.create',
  });
};

export const composeOne = <ThrowOnError extends boolean = false>(
  options: Options<ComposeOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeOneError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.one',
  });
};

export const composeUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ComposeUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.update',
  });
};

export const composeDelete = <ThrowOnError extends boolean = false>(
  options: Options<ComposeDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.delete',
  });
};

export const composeCleanQueues = <ThrowOnError extends boolean = false>(
  options: Options<ComposeCleanQueuesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeCleanQueuesError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.cleanQueues',
  });
};

export const composeLoadServices = <ThrowOnError extends boolean = false>(
  options: Options<ComposeLoadServicesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeLoadServicesError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.loadServices',
  });
};

export const composeFetchSourceType = <ThrowOnError extends boolean = false>(
  options: Options<ComposeFetchSourceTypeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeFetchSourceTypeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.fetchSourceType',
  });
};

export const composeRandomizeCompose = <ThrowOnError extends boolean = false>(
  options: Options<ComposeRandomizeComposeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeRandomizeComposeError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.randomizeCompose',
  });
};

export const composeGetConvertedCompose = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComposeGetConvertedComposeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeGetConvertedComposeError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.getConvertedCompose',
  });
};

export const composeDeploy = <ThrowOnError extends boolean = false>(
  options: Options<ComposeDeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeDeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.deploy',
  });
};

export const composeRedeploy = <ThrowOnError extends boolean = false>(
  options: Options<ComposeRedeployData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeRedeployError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.redeploy',
  });
};

export const composeStop = <ThrowOnError extends boolean = false>(
  options: Options<ComposeStopData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeStopError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.stop',
  });
};

export const composeGetDefaultCommand = <ThrowOnError extends boolean = false>(
  options: Options<ComposeGetDefaultCommandData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeGetDefaultCommandError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.getDefaultCommand',
  });
};

export const composeRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<ComposeRefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeRefreshTokenError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.refreshToken',
  });
};

export const composeDeployTemplate = <ThrowOnError extends boolean = false>(
  options: Options<ComposeDeployTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ComposeDeployTemplateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/compose.deployTemplate',
  });
};

export const composeTemplates = <ThrowOnError extends boolean = false>(
  options?: Options<ComposeTemplatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeTemplatesError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.templates',
  });
};

export const composeGetTags = <ThrowOnError extends boolean = false>(
  options?: Options<ComposeGetTagsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ComposeGetTagsError,
    ThrowOnError
  >({
    ...options,
    url: '/compose.getTags',
  });
};

export const userAll = <ThrowOnError extends boolean = false>(
  options?: Options<UserAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, UserAllError, ThrowOnError>({
    ...options,
    url: '/user.all',
  });
};

export const userByAuthId = <ThrowOnError extends boolean = false>(
  options: Options<UserByAuthIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    UserByAuthIdError,
    ThrowOnError
  >({
    ...options,
    url: '/user.byAuthId',
  });
};

export const userByUserId = <ThrowOnError extends boolean = false>(
  options: Options<UserByUserIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    UserByUserIdError,
    ThrowOnError
  >({
    ...options,
    url: '/user.byUserId',
  });
};

export const domainCreate = <ThrowOnError extends boolean = false>(
  options: Options<DomainCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DomainCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/domain.create',
  });
};

export const domainByApplicationId = <ThrowOnError extends boolean = false>(
  options: Options<DomainByApplicationIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DomainByApplicationIdError,
    ThrowOnError
  >({
    ...options,
    url: '/domain.byApplicationId',
  });
};

export const domainByComposeId = <ThrowOnError extends boolean = false>(
  options: Options<DomainByComposeIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DomainByComposeIdError,
    ThrowOnError
  >({
    ...options,
    url: '/domain.byComposeId',
  });
};

export const domainGenerateDomain = <ThrowOnError extends boolean = false>(
  options: Options<DomainGenerateDomainData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DomainGenerateDomainError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/domain.generateDomain',
  });
};

export const domainUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DomainUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DomainUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/domain.update',
  });
};

export const domainOne = <ThrowOnError extends boolean = false>(
  options: Options<DomainOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, DomainOneError, ThrowOnError>(
    {
      ...options,
      url: '/domain.one',
    },
  );
};

export const domainDelete = <ThrowOnError extends boolean = false>(
  options: Options<DomainDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DomainDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/domain.delete',
  });
};

export const destinationCreate = <ThrowOnError extends boolean = false>(
  options: Options<DestinationCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DestinationCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/destination.create',
  });
};

export const destinationTestConnection = <ThrowOnError extends boolean = false>(
  options: Options<DestinationTestConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DestinationTestConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/destination.testConnection',
  });
};

export const destinationOne = <ThrowOnError extends boolean = false>(
  options: Options<DestinationOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DestinationOneError,
    ThrowOnError
  >({
    ...options,
    url: '/destination.one',
  });
};

export const destinationAll = <ThrowOnError extends boolean = false>(
  options?: Options<DestinationAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DestinationAllError,
    ThrowOnError
  >({
    ...options,
    url: '/destination.all',
  });
};

export const destinationRemove = <ThrowOnError extends boolean = false>(
  options: Options<DestinationRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DestinationRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/destination.remove',
  });
};

export const destinationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DestinationUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    DestinationUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/destination.update',
  });
};

export const backupCreate = <ThrowOnError extends boolean = false>(
  options: Options<BackupCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.create',
  });
};

export const backupOne = <ThrowOnError extends boolean = false>(
  options: Options<BackupOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, BackupOneError, ThrowOnError>(
    {
      ...options,
      url: '/backup.one',
    },
  );
};

export const backupUpdate = <ThrowOnError extends boolean = false>(
  options: Options<BackupUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.update',
  });
};

export const backupRemove = <ThrowOnError extends boolean = false>(
  options: Options<BackupRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.remove',
  });
};

export const backupManualBackupPostgres = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BackupManualBackupPostgresData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupManualBackupPostgresError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.manualBackupPostgres',
  });
};

export const backupManualBackupMySql = <ThrowOnError extends boolean = false>(
  options: Options<BackupManualBackupMySqlData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupManualBackupMySqlError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.manualBackupMySql',
  });
};

export const backupManualBackupMariadb = <ThrowOnError extends boolean = false>(
  options: Options<BackupManualBackupMariadbData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupManualBackupMariadbError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.manualBackupMariadb',
  });
};

export const backupManualBackupMongo = <ThrowOnError extends boolean = false>(
  options: Options<BackupManualBackupMongoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BackupManualBackupMongoError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/backup.manualBackupMongo',
  });
};

export const deploymentAll = <ThrowOnError extends boolean = false>(
  options: Options<DeploymentAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DeploymentAllError,
    ThrowOnError
  >({
    ...options,
    url: '/deployment.all',
  });
};

export const deploymentAllByCompose = <ThrowOnError extends boolean = false>(
  options: Options<DeploymentAllByComposeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DeploymentAllByComposeError,
    ThrowOnError
  >({
    ...options,
    url: '/deployment.allByCompose',
  });
};

export const deploymentAllByServer = <ThrowOnError extends boolean = false>(
  options: Options<DeploymentAllByServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    DeploymentAllByServerError,
    ThrowOnError
  >({
    ...options,
    url: '/deployment.allByServer',
  });
};

export const mountsCreate = <ThrowOnError extends boolean = false>(
  options: Options<MountsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MountsCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mounts.create',
  });
};

export const mountsRemove = <ThrowOnError extends boolean = false>(
  options: Options<MountsRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MountsRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mounts.remove',
  });
};

export const mountsOne = <ThrowOnError extends boolean = false>(
  options: Options<MountsOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, MountsOneError, ThrowOnError>(
    {
      ...options,
      url: '/mounts.one',
    },
  );
};

export const mountsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<MountsUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    MountsUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/mounts.update',
  });
};

export const certificatesCreate = <ThrowOnError extends boolean = false>(
  options: Options<CertificatesCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    CertificatesCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/certificates.create',
  });
};

export const certificatesOne = <ThrowOnError extends boolean = false>(
  options: Options<CertificatesOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    CertificatesOneError,
    ThrowOnError
  >({
    ...options,
    url: '/certificates.one',
  });
};

export const certificatesRemove = <ThrowOnError extends boolean = false>(
  options: Options<CertificatesRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    CertificatesRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/certificates.remove',
  });
};

export const certificatesAll = <ThrowOnError extends boolean = false>(
  options?: Options<CertificatesAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    CertificatesAllError,
    ThrowOnError
  >({
    ...options,
    url: '/certificates.all',
  });
};

export const settingsReloadServer = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReloadServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsReloadServerError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.reloadServer',
  });
};

export const settingsReloadTraefik = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReloadTraefikData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsReloadTraefikError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.reloadTraefik',
  });
};

export const settingsToggleDashboard = <ThrowOnError extends boolean = false>(
  options: Options<SettingsToggleDashboardData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsToggleDashboardError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.toggleDashboard',
  });
};

export const settingsCleanUnusedImages = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsCleanUnusedImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanUnusedImagesError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanUnusedImages',
  });
};

export const settingsCleanUnusedVolumes = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsCleanUnusedVolumesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanUnusedVolumesError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanUnusedVolumes',
  });
};

export const settingsCleanStoppedContainers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsCleanStoppedContainersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanStoppedContainersError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanStoppedContainers',
  });
};

export const settingsCleanDockerBuilder = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsCleanDockerBuilderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanDockerBuilderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanDockerBuilder',
  });
};

export const settingsCleanDockerPrune = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsCleanDockerPruneData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanDockerPruneError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanDockerPrune',
  });
};

export const settingsCleanAll = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsCleanAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanAllError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.cleanAll',
  });
};

export const settingsCleanMonitoring = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsCleanMonitoringData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanMonitoringError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.cleanMonitoring',
  });
};

export const settingsSaveSshPrivateKey = <ThrowOnError extends boolean = false>(
  options: Options<SettingsSaveSshPrivateKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsSaveSshPrivateKeyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.saveSSHPrivateKey',
  });
};

export const settingsAssignDomainServer = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SettingsAssignDomainServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsAssignDomainServerError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.assignDomainServer',
  });
};

export const settingsCleanSshPrivateKey = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsCleanSshPrivateKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCleanSshPrivateKeyError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.cleanSSHPrivateKey',
  });
};

export const settingsUpdateDockerCleanup = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SettingsUpdateDockerCleanupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateDockerCleanupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.updateDockerCleanup',
  });
};

export const settingsReadTraefikConfig = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReadTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readTraefikConfig',
  });
};

export const settingsUpdateTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SettingsUpdateTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.updateTraefikConfig',
  });
};

export const settingsReadWebServerTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsReadWebServerTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadWebServerTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readWebServerTraefikConfig',
  });
};

export const settingsUpdateWebServerTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SettingsUpdateWebServerTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateWebServerTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.updateWebServerTraefikConfig',
  });
};

export const settingsReadMiddlewareTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsReadMiddlewareTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadMiddlewareTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readMiddlewareTraefikConfig',
  });
};

export const settingsUpdateMiddlewareTraefikConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SettingsUpdateMiddlewareTraefikConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateMiddlewareTraefikConfigError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.updateMiddlewareTraefikConfig',
  });
};

export const settingsCheckAndUpdateImage = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsCheckAndUpdateImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsCheckAndUpdateImageError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.checkAndUpdateImage',
  });
};

export const settingsUpdateServer = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsUpdateServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateServerError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.updateServer',
  });
};

export const settingsGetDokployVersion = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsGetDokployVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsGetDokployVersionError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.getDokployVersion',
  });
};

export const settingsReadDirectories = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReadDirectoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadDirectoriesError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readDirectories',
  });
};

export const settingsUpdateTraefikFile = <ThrowOnError extends boolean = false>(
  options: Options<SettingsUpdateTraefikFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsUpdateTraefikFileError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.updateTraefikFile',
  });
};

export const settingsReadTraefikFile = <ThrowOnError extends boolean = false>(
  options: Options<SettingsReadTraefikFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadTraefikFileError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readTraefikFile',
  });
};

export const settingsGetIp = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsGetIpData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsGetIpError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.getIp',
  });
};

export const settingsGetOpenApiDocument = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsGetOpenApiDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsGetOpenApiDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.getOpenApiDocument',
  });
};

export const settingsReadTraefikEnv = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReadTraefikEnvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadTraefikEnvError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readTraefikEnv',
  });
};

export const settingsWriteTraefikEnv = <ThrowOnError extends boolean = false>(
  options: Options<SettingsWriteTraefikEnvData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsWriteTraefikEnvError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.writeTraefikEnv',
  });
};

export const settingsHaveTraefikDashboardPortEnabled = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsHaveTraefikDashboardPortEnabledData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsHaveTraefikDashboardPortEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.haveTraefikDashboardPortEnabled',
  });
};

export const settingsReadStats = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsReadStatsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsReadStatsError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.readStats',
  });
};

export const settingsGetLogRotateStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsGetLogRotateStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsGetLogRotateStatusError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.getLogRotateStatus',
  });
};

export const settingsToggleLogRotate = <ThrowOnError extends boolean = false>(
  options: Options<SettingsToggleLogRotateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsToggleLogRotateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.toggleLogRotate',
  });
};

export const settingsHaveActivateRequests = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SettingsHaveActivateRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsHaveActivateRequestsError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.haveActivateRequests',
  });
};

export const settingsToggleRequests = <ThrowOnError extends boolean = false>(
  options: Options<SettingsToggleRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsToggleRequestsError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.toggleRequests',
  });
};

export const settingsIsCloud = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsIsCloudData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsIsCloudError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.isCloud',
  });
};

export const settingsHealth = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsHealthData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsHealthError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.health',
  });
};

export const settingsSetupGpu = <ThrowOnError extends boolean = false>(
  options: Options<SettingsSetupGpuData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SettingsSetupGpuError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/settings.setupGPU',
  });
};

export const settingsCheckGpuStatus = <ThrowOnError extends boolean = false>(
  options?: Options<SettingsCheckGpuStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SettingsCheckGpuStatusError,
    ThrowOnError
  >({
    ...options,
    url: '/settings.checkGPUStatus',
  });
};

export const securityCreate = <ThrowOnError extends boolean = false>(
  options: Options<SecurityCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SecurityCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/security.create',
  });
};

export const securityOne = <ThrowOnError extends boolean = false>(
  options: Options<SecurityOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    SecurityOneError,
    ThrowOnError
  >({
    ...options,
    url: '/security.one',
  });
};

export const securityDelete = <ThrowOnError extends boolean = false>(
  options: Options<SecurityDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SecurityDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/security.delete',
  });
};

export const securityUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SecurityUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SecurityUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/security.update',
  });
};

export const redirectsCreate = <ThrowOnError extends boolean = false>(
  options: Options<RedirectsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedirectsCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redirects.create',
  });
};

export const redirectsOne = <ThrowOnError extends boolean = false>(
  options: Options<RedirectsOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    RedirectsOneError,
    ThrowOnError
  >({
    ...options,
    url: '/redirects.one',
  });
};

export const redirectsDelete = <ThrowOnError extends boolean = false>(
  options: Options<RedirectsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedirectsDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redirects.delete',
  });
};

export const redirectsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RedirectsUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RedirectsUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/redirects.update',
  });
};

export const portCreate = <ThrowOnError extends boolean = false>(
  options: Options<PortCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PortCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/port.create',
  });
};

export const portOne = <ThrowOnError extends boolean = false>(
  options: Options<PortOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, PortOneError, ThrowOnError>({
    ...options,
    url: '/port.one',
  });
};

export const portDelete = <ThrowOnError extends boolean = false>(
  options: Options<PortDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PortDeleteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/port.delete',
  });
};

export const portUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PortUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    PortUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/port.update',
  });
};

export const registryCreate = <ThrowOnError extends boolean = false>(
  options: Options<RegistryCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RegistryCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/registry.create',
  });
};

export const registryRemove = <ThrowOnError extends boolean = false>(
  options: Options<RegistryRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RegistryRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/registry.remove',
  });
};

export const registryUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RegistryUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RegistryUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/registry.update',
  });
};

export const registryAll = <ThrowOnError extends boolean = false>(
  options?: Options<RegistryAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    RegistryAllError,
    ThrowOnError
  >({
    ...options,
    url: '/registry.all',
  });
};

export const registryOne = <ThrowOnError extends boolean = false>(
  options: Options<RegistryOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    RegistryOneError,
    ThrowOnError
  >({
    ...options,
    url: '/registry.one',
  });
};

export const registryTestRegistry = <ThrowOnError extends boolean = false>(
  options: Options<RegistryTestRegistryData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    RegistryTestRegistryError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/registry.testRegistry',
  });
};

export const clusterGetNodes = <ThrowOnError extends boolean = false>(
  options?: Options<ClusterGetNodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ClusterGetNodesError,
    ThrowOnError
  >({
    ...options,
    url: '/cluster.getNodes',
  });
};

export const clusterRemoveWorker = <ThrowOnError extends boolean = false>(
  options: Options<ClusterRemoveWorkerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ClusterRemoveWorkerError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/cluster.removeWorker',
  });
};

export const clusterAddWorker = <ThrowOnError extends boolean = false>(
  options?: Options<ClusterAddWorkerData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ClusterAddWorkerError,
    ThrowOnError
  >({
    ...options,
    url: '/cluster.addWorker',
  });
};

export const clusterAddManager = <ThrowOnError extends boolean = false>(
  options?: Options<ClusterAddManagerData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ClusterAddManagerError,
    ThrowOnError
  >({
    ...options,
    url: '/cluster.addManager',
  });
};

export const notificationCreateSlack = <ThrowOnError extends boolean = false>(
  options: Options<NotificationCreateSlackData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationCreateSlackError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.createSlack',
  });
};

export const notificationUpdateSlack = <ThrowOnError extends boolean = false>(
  options: Options<NotificationUpdateSlackData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationUpdateSlackError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.updateSlack',
  });
};

export const notificationTestSlackConnection = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationTestSlackConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationTestSlackConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.testSlackConnection',
  });
};

export const notificationCreateTelegram = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationCreateTelegramData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationCreateTelegramError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.createTelegram',
  });
};

export const notificationUpdateTelegram = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationUpdateTelegramData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationUpdateTelegramError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.updateTelegram',
  });
};

export const notificationTestTelegramConnection = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationTestTelegramConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationTestTelegramConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.testTelegramConnection',
  });
};

export const notificationCreateDiscord = <ThrowOnError extends boolean = false>(
  options: Options<NotificationCreateDiscordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationCreateDiscordError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.createDiscord',
  });
};

export const notificationUpdateDiscord = <ThrowOnError extends boolean = false>(
  options: Options<NotificationUpdateDiscordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationUpdateDiscordError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.updateDiscord',
  });
};

export const notificationTestDiscordConnection = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationTestDiscordConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationTestDiscordConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.testDiscordConnection',
  });
};

export const notificationCreateEmail = <ThrowOnError extends boolean = false>(
  options: Options<NotificationCreateEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationCreateEmailError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.createEmail',
  });
};

export const notificationUpdateEmail = <ThrowOnError extends boolean = false>(
  options: Options<NotificationUpdateEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationUpdateEmailError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.updateEmail',
  });
};

export const notificationTestEmailConnection = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NotificationTestEmailConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationTestEmailConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.testEmailConnection',
  });
};

export const notificationRemove = <ThrowOnError extends boolean = false>(
  options: Options<NotificationRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    NotificationRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/notification.remove',
  });
};

export const notificationOne = <ThrowOnError extends boolean = false>(
  options: Options<NotificationOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    NotificationOneError,
    ThrowOnError
  >({
    ...options,
    url: '/notification.one',
  });
};

export const notificationAll = <ThrowOnError extends boolean = false>(
  options?: Options<NotificationAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    NotificationAllError,
    ThrowOnError
  >({
    ...options,
    url: '/notification.all',
  });
};

export const sshKeyCreate = <ThrowOnError extends boolean = false>(
  options: Options<SshKeyCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SshKeyCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/sshKey.create',
  });
};

export const sshKeyRemove = <ThrowOnError extends boolean = false>(
  options: Options<SshKeyRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SshKeyRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/sshKey.remove',
  });
};

export const sshKeyOne = <ThrowOnError extends boolean = false>(
  options: Options<SshKeyOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, SshKeyOneError, ThrowOnError>(
    {
      ...options,
      url: '/sshKey.one',
    },
  );
};

export const sshKeyAll = <ThrowOnError extends boolean = false>(
  options?: Options<SshKeyAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, SshKeyAllError, ThrowOnError>(
    {
      ...options,
      url: '/sshKey.all',
    },
  );
};

export const sshKeyGenerate = <ThrowOnError extends boolean = false>(
  options: Options<SshKeyGenerateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SshKeyGenerateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/sshKey.generate',
  });
};

export const sshKeyUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SshKeyUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    SshKeyUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/sshKey.update',
  });
};

export const gitProviderGetAll = <ThrowOnError extends boolean = false>(
  options?: Options<GitProviderGetAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GitProviderGetAllError,
    ThrowOnError
  >({
    ...options,
    url: '/gitProvider.getAll',
  });
};

export const gitProviderRemove = <ThrowOnError extends boolean = false>(
  options: Options<GitProviderRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GitProviderRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/gitProvider.remove',
  });
};

export const bitbucketCreate = <ThrowOnError extends boolean = false>(
  options: Options<BitbucketCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BitbucketCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/bitbucket.create',
  });
};

export const bitbucketOne = <ThrowOnError extends boolean = false>(
  options: Options<BitbucketOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    BitbucketOneError,
    ThrowOnError
  >({
    ...options,
    url: '/bitbucket.one',
  });
};

export const bitbucketBitbucketProviders = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<BitbucketBitbucketProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    BitbucketBitbucketProvidersError,
    ThrowOnError
  >({
    ...options,
    url: '/bitbucket.bitbucketProviders',
  });
};

export const bitbucketGetBitbucketRepositories = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BitbucketGetBitbucketRepositoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    BitbucketGetBitbucketRepositoriesError,
    ThrowOnError
  >({
    ...options,
    url: '/bitbucket.getBitbucketRepositories',
  });
};

export const bitbucketGetBitbucketBranches = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BitbucketGetBitbucketBranchesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    BitbucketGetBitbucketBranchesError,
    ThrowOnError
  >({
    ...options,
    url: '/bitbucket.getBitbucketBranches',
  });
};

export const bitbucketTestConnection = <ThrowOnError extends boolean = false>(
  options: Options<BitbucketTestConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BitbucketTestConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/bitbucket.testConnection',
  });
};

export const bitbucketUpdate = <ThrowOnError extends boolean = false>(
  options: Options<BitbucketUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    BitbucketUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/bitbucket.update',
  });
};

export const gitlabCreate = <ThrowOnError extends boolean = false>(
  options: Options<GitlabCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GitlabCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/gitlab.create',
  });
};

export const gitlabOne = <ThrowOnError extends boolean = false>(
  options: Options<GitlabOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, GitlabOneError, ThrowOnError>(
    {
      ...options,
      url: '/gitlab.one',
    },
  );
};

export const gitlabGitlabProviders = <ThrowOnError extends boolean = false>(
  options?: Options<GitlabGitlabProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GitlabGitlabProvidersError,
    ThrowOnError
  >({
    ...options,
    url: '/gitlab.gitlabProviders',
  });
};

export const gitlabGetGitlabRepositories = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GitlabGetGitlabRepositoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GitlabGetGitlabRepositoriesError,
    ThrowOnError
  >({
    ...options,
    url: '/gitlab.getGitlabRepositories',
  });
};

export const gitlabGetGitlabBranches = <ThrowOnError extends boolean = false>(
  options: Options<GitlabGetGitlabBranchesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GitlabGetGitlabBranchesError,
    ThrowOnError
  >({
    ...options,
    url: '/gitlab.getGitlabBranches',
  });
};

export const gitlabTestConnection = <ThrowOnError extends boolean = false>(
  options: Options<GitlabTestConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GitlabTestConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/gitlab.testConnection',
  });
};

export const gitlabUpdate = <ThrowOnError extends boolean = false>(
  options: Options<GitlabUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GitlabUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/gitlab.update',
  });
};

export const githubOne = <ThrowOnError extends boolean = false>(
  options: Options<GithubOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, GithubOneError, ThrowOnError>(
    {
      ...options,
      url: '/github.one',
    },
  );
};

export const githubGetGithubRepositories = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GithubGetGithubRepositoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GithubGetGithubRepositoriesError,
    ThrowOnError
  >({
    ...options,
    url: '/github.getGithubRepositories',
  });
};

export const githubGetGithubBranches = <ThrowOnError extends boolean = false>(
  options: Options<GithubGetGithubBranchesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GithubGetGithubBranchesError,
    ThrowOnError
  >({
    ...options,
    url: '/github.getGithubBranches',
  });
};

export const githubGithubProviders = <ThrowOnError extends boolean = false>(
  options?: Options<GithubGithubProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    GithubGithubProvidersError,
    ThrowOnError
  >({
    ...options,
    url: '/github.githubProviders',
  });
};

export const githubTestConnection = <ThrowOnError extends boolean = false>(
  options: Options<GithubTestConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GithubTestConnectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/github.testConnection',
  });
};

export const githubUpdate = <ThrowOnError extends boolean = false>(
  options: Options<GithubUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    GithubUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/github.update',
  });
};

export const serverCreate = <ThrowOnError extends boolean = false>(
  options: Options<ServerCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ServerCreateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/server.create',
  });
};

export const serverOne = <ThrowOnError extends boolean = false>(
  options: Options<ServerOneData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, ServerOneError, ThrowOnError>(
    {
      ...options,
      url: '/server.one',
    },
  );
};

export const serverAll = <ThrowOnError extends boolean = false>(
  options?: Options<ServerAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, ServerAllError, ThrowOnError>(
    {
      ...options,
      url: '/server.all',
    },
  );
};

export const serverWithSshKey = <ThrowOnError extends boolean = false>(
  options?: Options<ServerWithSshKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ServerWithSshKeyError,
    ThrowOnError
  >({
    ...options,
    url: '/server.withSSHKey',
  });
};

export const serverSetup = <ThrowOnError extends boolean = false>(
  options: Options<ServerSetupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ServerSetupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/server.setup',
  });
};

export const serverRemove = <ThrowOnError extends boolean = false>(
  options: Options<ServerRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ServerRemoveError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/server.remove',
  });
};

export const serverUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ServerUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    ServerUpdateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/server.update',
  });
};

export const serverPublicIp = <ThrowOnError extends boolean = false>(
  options?: Options<ServerPublicIpData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    ServerPublicIpError,
    ThrowOnError
  >({
    ...options,
    url: '/server.publicIp',
  });
};

export const stripeGetProducts = <ThrowOnError extends boolean = false>(
  options?: Options<StripeGetProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    StripeGetProductsError,
    ThrowOnError
  >({
    ...options,
    url: '/stripe.getProducts',
  });
};

export const stripeCreateCheckoutSession = <
  ThrowOnError extends boolean = false,
>(
  options: Options<StripeCreateCheckoutSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    StripeCreateCheckoutSessionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    url: '/stripe.createCheckoutSession',
  });
};

export const stripeCreateCustomerPortalSession = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<StripeCreateCustomerPortalSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    StripeCreateCustomerPortalSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/stripe.createCustomerPortalSession',
  });
};

export const stripeCanCreateMoreServers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<StripeCanCreateMoreServersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    unknown,
    StripeCanCreateMoreServersError,
    ThrowOnError
  >({
    ...options,
    url: '/stripe.canCreateMoreServers',
  });
};
